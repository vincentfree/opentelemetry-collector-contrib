// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "{{ .Name }}"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	{{- range $name, $metric := .Metrics }}
	{{ $name.Render }} MetricIntf
	{{- end }}
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
    return []string {
    {{- range $name, $metric := .Metrics }}
        "{{ $name }}",
    {{- end }}
    }
}

var metricsByName = map[string]MetricIntf {
{{- range $name, $metric := .Metrics }}
  "{{ $name }}": Metrics.{{ $name.Render }},
{{- end }}
}

func (m *metricStruct) ByName(n string) MetricIntf {
    return metricsByName[n]
}

{{- /* Renders metric descriptors. */}}
// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	{{- range $name, $metric := .Metrics }}
	&metricImpl{
		"{{ $name }}",
		func(metric pdata.Metric) {
			metric.SetName("{{ $name }}")
			metric.SetDescription("{{ $metric.Description }}")
			metric.SetUnit("{{ $metric.Unit }}")
			metric.SetDataType(pdata.MetricDataType{{ $metric.Data.Type }})
			{{- if $metric.Data.HasMonotonic }}
			metric.{{ $metric.Data.Type }}().SetIsMonotonic({{ $metric.Data.Monotonic }})
			{{- end }}
			{{- if $metric.Data.HasAggregated }}
			metric.{{ $metric.Data.Type }}().SetAggregationTemporality({{ $metric.Data.Aggregated.Type }})
			{{- end }}
		},
	},
	{{- end }}
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

{{- /* Renders attribute names. */}}
// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
    {{- range $name, $info := .Attributes }}
    // {{ $name.Render }} ({{ $info.Description }})
    {{ $name.Render }} string
    {{- end }}
}{
    {{- range $name, $info := .Attributes }}
    {{- if $info.Value }}
    "{{ $info.Value }}",
    {{- else }}
    "{{ $name }}",
    {{- end }}
    {{- end }}
}

// A is an alias for Attributes.
var A = Attributes

{{- /* Renders attribute enum values. */}}

{{ range $name, $info := .Attributes }}
{{ if $info.Enum }}
// Attribute{{ $name.Render }} are the possible values that the attribute "{{ $name }}" can have.
var Attribute{{ $name.Render }} = struct {
    {{- range $info.Enum }}
    {{ . | publicVar }} string
    {{- end }}
}{
    {{- range $info.Enum }}
    "{{ . }}",
    {{- end }}
}
{{- end }}
{{- end }}
