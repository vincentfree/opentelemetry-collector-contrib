// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "mysqlreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	MysqlBufferPoolOperations MetricIntf
	MysqlBufferPoolPages      MetricIntf
	MysqlBufferPoolSize       MetricIntf
	MysqlCommands             MetricIntf
	MysqlDoubleWrites         MetricIntf
	MysqlHandlers             MetricIntf
	MysqlLocks                MetricIntf
	MysqlLogOperations        MetricIntf
	MysqlOperations           MetricIntf
	MysqlPageOperations       MetricIntf
	MysqlRowLocks             MetricIntf
	MysqlRowOperations        MetricIntf
	MysqlSorts                MetricIntf
	MysqlThreads              MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"mysql.buffer_pool_operations",
		"mysql.buffer_pool_pages",
		"mysql.buffer_pool_size",
		"mysql.commands",
		"mysql.double_writes",
		"mysql.handlers",
		"mysql.locks",
		"mysql.log_operations",
		"mysql.operations",
		"mysql.page_operations",
		"mysql.row_locks",
		"mysql.row_operations",
		"mysql.sorts",
		"mysql.threads",
	}
}

var metricsByName = map[string]MetricIntf{
	"mysql.buffer_pool_operations": Metrics.MysqlBufferPoolOperations,
	"mysql.buffer_pool_pages":      Metrics.MysqlBufferPoolPages,
	"mysql.buffer_pool_size":       Metrics.MysqlBufferPoolSize,
	"mysql.commands":               Metrics.MysqlCommands,
	"mysql.double_writes":          Metrics.MysqlDoubleWrites,
	"mysql.handlers":               Metrics.MysqlHandlers,
	"mysql.locks":                  Metrics.MysqlLocks,
	"mysql.log_operations":         Metrics.MysqlLogOperations,
	"mysql.operations":             Metrics.MysqlOperations,
	"mysql.page_operations":        Metrics.MysqlPageOperations,
	"mysql.row_locks":              Metrics.MysqlRowLocks,
	"mysql.row_operations":         Metrics.MysqlRowOperations,
	"mysql.sorts":                  Metrics.MysqlSorts,
	"mysql.threads":                Metrics.MysqlThreads,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"mysql.buffer_pool_operations",
		func(metric pdata.Metric) {
			metric.SetName("mysql.buffer_pool_operations")
			metric.SetDescription("The number of operations on the InnoDB buffer pool.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.buffer_pool_pages",
		func(metric pdata.Metric) {
			metric.SetName("mysql.buffer_pool_pages")
			metric.SetDescription("The number of pages in the InnoDB buffer pool.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(false)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.buffer_pool_size",
		func(metric pdata.Metric) {
			metric.SetName("mysql.buffer_pool_size")
			metric.SetDescription("The number of bytes in the InnoDB buffer pool.")
			metric.SetUnit("By")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(false)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.commands",
		func(metric pdata.Metric) {
			metric.SetName("mysql.commands")
			metric.SetDescription("The number of times each type of command has been executed.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.double_writes",
		func(metric pdata.Metric) {
			metric.SetName("mysql.double_writes")
			metric.SetDescription("The number of writes to the InnoDB doublewrite buffer.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.handlers",
		func(metric pdata.Metric) {
			metric.SetName("mysql.handlers")
			metric.SetDescription("The number of requests to various MySQL handlers.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.locks",
		func(metric pdata.Metric) {
			metric.SetName("mysql.locks")
			metric.SetDescription("The number of MySQL locks.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.log_operations",
		func(metric pdata.Metric) {
			metric.SetName("mysql.log_operations")
			metric.SetDescription("The number of InndoDB log operations.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.operations",
		func(metric pdata.Metric) {
			metric.SetName("mysql.operations")
			metric.SetDescription("The number of InndoDB operations.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.page_operations",
		func(metric pdata.Metric) {
			metric.SetName("mysql.page_operations")
			metric.SetDescription("The number of InndoDB page operations.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.row_locks",
		func(metric pdata.Metric) {
			metric.SetName("mysql.row_locks")
			metric.SetDescription("The number of InndoDB row locks.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.row_operations",
		func(metric pdata.Metric) {
			metric.SetName("mysql.row_operations")
			metric.SetDescription("The number of InndoDB row operations.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.sorts",
		func(metric pdata.Metric) {
			metric.SetName("mysql.sorts")
			metric.SetDescription("The number of MySQL sorts.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"mysql.threads",
		func(metric pdata.Metric) {
			metric.SetName("mysql.threads")
			metric.SetDescription("The state of MySQL threads.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(false)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// BufferPoolOperations (The buffer pool operations types.)
	BufferPoolOperations string
	// BufferPoolPages (The buffer pool pages types.)
	BufferPoolPages string
	// BufferPoolSize (The buffer pool size types.)
	BufferPoolSize string
	// Command (The command types.)
	Command string
	// DoubleWrites (The doublewrite types.)
	DoubleWrites string
	// Handler (The handler types.)
	Handler string
	// Locks (The table locks type.)
	Locks string
	// LogOperations (The log operation types.)
	LogOperations string
	// Operations (The operation types.)
	Operations string
	// PageOperations (The page operation types.)
	PageOperations string
	// RowLocks (The row lock type.)
	RowLocks string
	// RowOperations (The row operation type.)
	RowOperations string
	// Sorts (The sort count type.)
	Sorts string
	// Threads (The thread count type.)
	Threads string
}{
	"operation",
	"kind",
	"kind",
	"command",
	"kind",
	"kind",
	"kind",
	"operation",
	"operation",
	"operation",
	"kind",
	"operation",
	"kind",
	"kind",
}

// A is an alias for Attributes.
var A = Attributes

// AttributeBufferPoolOperations are the possible values that the attribute "buffer_pool_operations" can have.
var AttributeBufferPoolOperations = struct {
	ReadAheadRnd     string
	ReadAhead        string
	ReadAheadEvicted string
	ReadRequests     string
	Reads            string
	WaitFree         string
	WriteRequests    string
}{
	"read_ahead_rnd",
	"read_ahead",
	"read_ahead_evicted",
	"read_requests",
	"reads",
	"wait_free",
	"write_requests",
}

// AttributeBufferPoolPages are the possible values that the attribute "buffer_pool_pages" can have.
var AttributeBufferPoolPages = struct {
	Data    string
	Dirty   string
	Flushed string
	Free    string
	Misc    string
	Total   string
}{
	"data",
	"dirty",
	"flushed",
	"free",
	"misc",
	"total",
}

// AttributeBufferPoolSize are the possible values that the attribute "buffer_pool_size" can have.
var AttributeBufferPoolSize = struct {
	Data  string
	Dirty string
	Total string
}{
	"data",
	"dirty",
	"total",
}

// AttributeCommand are the possible values that the attribute "command" can have.
var AttributeCommand = struct {
	Execute      string
	Close        string
	Fetch        string
	Prepare      string
	Reset        string
	SendLongData string
}{
	"execute",
	"close",
	"fetch",
	"prepare",
	"reset",
	"send_long_data",
}

// AttributeDoubleWrites are the possible values that the attribute "double_writes" can have.
var AttributeDoubleWrites = struct {
	PagesWritten string
	Writes       string
}{
	"pages_written",
	"writes",
}

// AttributeHandler are the possible values that the attribute "handler" can have.
var AttributeHandler = struct {
	Commit            string
	Delete            string
	Discover          string
	ExternalLock      string
	MrrInit           string
	Prepare           string
	ReadFirst         string
	ReadKey           string
	ReadLast          string
	ReadNext          string
	ReadPrev          string
	ReadRnd           string
	ReadRndNext       string
	Rollback          string
	Savepoint         string
	SavepointRollback string
	Update            string
	Write             string
}{
	"commit",
	"delete",
	"discover",
	"external_lock",
	"mrr_init",
	"prepare",
	"read_first",
	"read_key",
	"read_last",
	"read_next",
	"read_prev",
	"read_rnd",
	"read_rnd_next",
	"rollback",
	"savepoint",
	"savepoint_rollback",
	"update",
	"write",
}

// AttributeLocks are the possible values that the attribute "locks" can have.
var AttributeLocks = struct {
	Immediate string
	Waited    string
}{
	"immediate",
	"waited",
}

// AttributeLogOperations are the possible values that the attribute "log_operations" can have.
var AttributeLogOperations = struct {
	Waits         string
	WriteRequests string
	Writes        string
}{
	"waits",
	"write_requests",
	"writes",
}

// AttributeOperations are the possible values that the attribute "operations" can have.
var AttributeOperations = struct {
	Fsyncs string
	Reads  string
	Writes string
}{
	"fsyncs",
	"reads",
	"writes",
}

// AttributePageOperations are the possible values that the attribute "page_operations" can have.
var AttributePageOperations = struct {
	Created string
	Read    string
	Written string
}{
	"created",
	"read",
	"written",
}

// AttributeRowLocks are the possible values that the attribute "row_locks" can have.
var AttributeRowLocks = struct {
	Waits string
	Time  string
}{
	"waits",
	"time",
}

// AttributeRowOperations are the possible values that the attribute "row_operations" can have.
var AttributeRowOperations = struct {
	Deleted  string
	Inserted string
	Read     string
	Updated  string
}{
	"deleted",
	"inserted",
	"read",
	"updated",
}

// AttributeSorts are the possible values that the attribute "sorts" can have.
var AttributeSorts = struct {
	MergePasses string
	Range       string
	Rows        string
	Scan        string
}{
	"merge_passes",
	"range",
	"rows",
	"scan",
}

// AttributeThreads are the possible values that the attribute "threads" can have.
var AttributeThreads = struct {
	Cached    string
	Connected string
	Created   string
	Running   string
}{
	"cached",
	"connected",
	"created",
	"running",
}
