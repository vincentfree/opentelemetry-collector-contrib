// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config"
	"go.opentelemetry.io/collector/model/pdata"
)

// Type is the component type name.
const Type config.Type = "apachereceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	ApacheCurrentConnections MetricIntf
	ApacheRequests           MetricIntf
	ApacheScoreboard         MetricIntf
	ApacheTraffic            MetricIntf
	ApacheUptime             MetricIntf
	ApacheWorkers            MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"apache.current_connections",
		"apache.requests",
		"apache.scoreboard",
		"apache.traffic",
		"apache.uptime",
		"apache.workers",
	}
}

var metricsByName = map[string]MetricIntf{
	"apache.current_connections": Metrics.ApacheCurrentConnections,
	"apache.requests":            Metrics.ApacheRequests,
	"apache.scoreboard":          Metrics.ApacheScoreboard,
	"apache.traffic":             Metrics.ApacheTraffic,
	"apache.uptime":              Metrics.ApacheUptime,
	"apache.workers":             Metrics.ApacheWorkers,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"apache.current_connections",
		func(metric pdata.Metric) {
			metric.SetName("apache.current_connections")
			metric.SetDescription("The number of active connections currently attached to the HTTP server.")
			metric.SetUnit("connections")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(false)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"apache.requests",
		func(metric pdata.Metric) {
			metric.SetName("apache.requests")
			metric.SetDescription("The number of requests serviced by the HTTP server per second.")
			metric.SetUnit("1")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"apache.scoreboard",
		func(metric pdata.Metric) {
			metric.SetName("apache.scoreboard")
			metric.SetDescription("The number of connections in each state.")
			metric.SetUnit("scoreboard")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(false)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"apache.traffic",
		func(metric pdata.Metric) {
			metric.SetName("apache.traffic")
			metric.SetDescription("Total HTTP server traffic.")
			metric.SetUnit("By")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"apache.uptime",
		func(metric pdata.Metric) {
			metric.SetName("apache.uptime")
			metric.SetDescription("The amount of time that the server has been running in seconds.")
			metric.SetUnit("s")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(true)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
	&metricImpl{
		"apache.workers",
		func(metric pdata.Metric) {
			metric.SetName("apache.workers")
			metric.SetDescription("The number of workers currently attached to the HTTP server.")
			metric.SetUnit("connections")
			metric.SetDataType(pdata.MetricDataTypeSum)
			metric.Sum().SetIsMonotonic(false)
			metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// ScoreboardState (The state of a connection.)
	ScoreboardState string
	// ServerName (The name of the Apache HTTP server.)
	ServerName string
	// WorkersState (The state of workers.)
	WorkersState string
}{
	"state",
	"server_name",
	"state",
}

// A is an alias for Attributes.
var A = Attributes

// AttributeScoreboardState are the possible values that the attribute "scoreboard_state" can have.
var AttributeScoreboardState = struct {
	Open        string
	Waiting     string
	Starting    string
	Reading     string
	Sending     string
	Keepalive   string
	Dnslookup   string
	Closing     string
	Logging     string
	Finishing   string
	IdleCleanup string
}{
	"open",
	"waiting",
	"starting",
	"reading",
	"sending",
	"keepalive",
	"dnslookup",
	"closing",
	"logging",
	"finishing",
	"idle_cleanup",
}

// AttributeWorkersState are the possible values that the attribute "workers_state" can have.
var AttributeWorkersState = struct {
	Busy string
	Idle string
}{
	"busy",
	"idle",
}
